#include <stdbool.h>
#include <stdint.h>
#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/pin_map.h"
#include "driverlib/systick.h"
#include "driverlib/interrupt.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "utils/uartstdio.h"
#include "driverlib/uart.h"
#include "inc/tm4c123gh6pm.h"
#define task1period 10
#define task2period 10
volatile int rtemp=20;
volatile int rhum=20;
volatile int temp=20;
volatile int hum=20;
unsigned long task1count=0;
unsigned long task2count=5;;
volatile int task1flag=0;
volatile int task2flag=0;
volatile char datastr[8];
void SysTickIntHandler1();
int main(void) {
    INIT();
    while(1) {
      if (task1flag==1) {
         task1();//getuart
         task1flag=0;
     }
     if (task2flag==1) {
         task2();//handling function
         task2flag=0;
     }
  }
}
void task1() {
    int i=0;
    while(UARTCharsAvail(UART1_BASE)) {
      datastr[i]= UARTCharGet(UART1_BASE);
      i++;
    }
    hum=(datastr[0]-48)*10+ (datastr[1]-48);
    temp=(datastr[2]-48)*10+ (datastr[3]-48);
    rhum=(datastr[4]-48)*10+ (datastr[5]-48);
    rtemp=(datastr[6]-48)*10+ (datastr[7]-48);
    senduart0(datastr,8);
}
void task2 () {
    if (rtemp>=temp+1)  GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_5,GPIO_PIN_5);
    if (rtemp<=temp-1)  GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_5,0);
    if (rhum>=hum+1)    GPIOPinWrite(GPIO_PORTE_BASE,GPIO_PIN_5,0);
    if (rhum<=hum-1)    GPIOPinWrite(GPIO_PORTE_BASE,GPIO_PIN_5,GPIO_PIN_5);
    senduart0("task2",5);
}
void INIT() {
    SysCtlClockSet(SYSCTL_SYSDIV_1 | SYSCTL_USE_OSC | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    GPIOPinTypeGPIOOutput(GPIO_PORTC_BASE, GPIO_PIN_5);
    GPIOPinTypeGPIOOutput(GPIO_PORTE_BASE, GPIO_PIN_5);
    //
    SysTickPeriodSet(1599999);// 1period=0.1s
    IntMasterEnable();
    SysTickIntEnable();
    SysTickEnable();
    SysTickIntRegister ( SysTickIntHandler1 );
     //
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 |  GPIO_PIN_1);
    UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 9600, UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE);
    //
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART1);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    GPIOPinConfigure(GPIO_PB0_U1RX);
    GPIOPinConfigure(GPIO_PB1_U1TX);
    GPIOPinTypeUART(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1);
    UARTConfigSetExpClk(UART1_BASE, SysCtlClockGet(), 9600, UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE);
}
void senduart0(char str[],int dodai) {
    int i=0;
    for (i=0;i<dodai;i++) {
        UARTCharPut(UART0_BASE, str[i]);
    }
}
void SysTickIntHandler1 (void) {
    senduart0("trongisr",8);
    if (task1count==0) {
        task1count=task1period;
        task1flag=1;
    }
    else task1count--;
    if (task2count==0) {
        task2count=task2period;
        task2flag=1;
    }
     else task2count--;
}

